---
import { getCollection } from "astro:content";
import Card from "../../components/article/Card.astro";
import SearchBar from "../../components/pagefind/SearchBar.astro";
import Page from "../../layouts/Page.astro";
import Banner from "../../components/Banner.astro";

function removeDoubleSlashes(link: string): string {
    return link.replace(/(^https?:\/\/)|(\/{2,})/g, (_, p1) => p1 || "/");
}

const posts = (await getCollection("articles")).sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());
---

<Page>
    <Banner title="Berita" />
    <main class="flex py-2 lg:py-8">
        <div class="mx-auto flex flex-col lg:flex-row">
            <div class="flex flex-col">
                <p class="mb-4 hidden rounded-md bg-red-100 p-4 text-center text-xl font-semibold" id="search-notfound">
                    Hasil tidak ditemukan
                </p>
                <div id="search-articles" class="grid grid-cols-1">
                    {
                        posts.map((post) => (
                            <Card
                                href={`${removeDoubleSlashes(`${Astro.url.origin}${import.meta.env.BASE_URL}/berita/${post.slug}`)}`}
                                title={post.data.title}
                                date={post.data.date}
                                cover_image={post.data.cover_image}
                                body={post.body}
                                data-pagefind-ignore
                            />
                        ))
                    }
                </div>
                <div id="search-results" class="grid grid-cols-1"></div>
            </div>
            <div class="flex min-w-max justify-center lg:mx-8 lg:border-l-2">
                <div class="flex w-full flex-col px-4 lg:ml-8 lg:w-auto lg:p-0">
                    <p class="text-xl font-semibold">Cari berita</p>
                    <hr class="my-4 min-w-full border-t-2 border-t-gray-700 opacity-20" />
                    <div class="flex w-full py-2 lg:m-0 lg:p-0">
                        <SearchBar />
                    </div>
                </div>
            </div>
        </div>
    </main>
    <script>
        // @ts-ignore
        const articlesContainer: HTMLDivElement = document.getElementById("search-articles");
        // @ts-ignore
        const resultsContainer: HTMLDivElement = document.getElementById("search-results");
        // @ts-ignore
        const notFoundText: HTMLDivElement = document.getElementById("search-notfound");
        // @ts-ignore
        const searchBarBorder: HTMLDivElement = document.getElementById("search-bar-border");

        //  Creates a new card element on #search-results.
        //! Will need to be updated manually if `components/article/Card.astro` changes
        function addResult(title: string, href: string, date_str: string, cover_image: string, body: string) {
            const description = body.replace(/[\r\n\t\f\v ]+/g, " ").substring(0, 250) + "...";

            const a = document.createElement("a");
            a.classList.add("transition-color", "group", "flex", "rounded-lg", "duration-150", "hover:bg-blue-50");
            a.href = href;

            const div1 = document.createElement("div");
            div1.classList.add(
                "flex",
                "cursor-pointer",
                "flex-col",
                "content-center",
                "justify-between",
                "rounded-lg",
                "p-4",
                "lg:flex-row",
            );

            const div2 = document.createElement("div");
            div2.classList.add("flex", "min-h-fit", "min-w-fit", "items-center", "justify-center");

            const img = document.createElement("img");
            img.src = cover_image;
            img.alt = "";
            img.width = 360;
            img.height = 360;
            img.classList.add(
                "h-44",
                "max-w-sm",
                "rounded-sm",
                "object-cover",
                "transition-all",
                "duration-150",
                "lg:h-44",
                "lg:w-72",
            );

            div2.appendChild(img);

            const div3 = document.createElement("div");
            div3.classList.add(
                "mt-2",
                "flex",
                "max-w-xl",
                "flex-col",
                "flex-wrap",
                "items-start",
                "lg:ml-4",
                "lg:mt-0",
            );

            const h1 = document.createElement("h1");
            h1.id = "title";
            h1.classList.add(
                "text-justify",
                "text-2xl",
                "font-semibold",
                "transition-colors",
                "duration-150",
                "group-hover:text-blue-500",
                "lg:text-start",
            );
            h1.textContent = title;

            const p1 = document.createElement("p");
            const date = new Date(date_str);
            p1.id = "date";
            p1.classList.add("mt-1", "text-sm", "text-neutral-400", "transition-colors", "duration-150", "lg:mt-2");
            p1.innerHTML = `dibuat pada <time datetime="${date.toISOString()}">${date.toLocaleDateString("id-ID", {
                weekday: "long",
                year: "numeric",
                month: "long",
                day: "numeric",
            })}</time>`;

            const p2 = document.createElement("p");
            p2.id = "description";
            p2.classList.add("text-md", "mt-2", "text-justify", "lg:mt-auto");
            p2.innerHTML = description; // Use innerHTML to parse the HTML content

            div3.appendChild(h1);
            div3.appendChild(p1);
            div3.appendChild(p2);

            div1.appendChild(div2);
            div1.appendChild(div3);

            a.appendChild(div1);

            const hr = document.createElement("hr");
            hr.classList.add("mb-6", "min-w-full", "border-t-2", "border-t-gray-700", "opacity-20", "lg:mt-4");

            resultsContainer.appendChild(a);
            resultsContainer.appendChild(hr);
            console.log(`added ${href}`);
        }

        function clearResults() {
            console.log("cleared result");
            resultsContainer.innerHTML = "";
        }

        function showArticlesContainer() {
            console.log("show articles container");
            articlesContainer.classList.toggle("hidden", false);
        }

        function hideArticlesContainer() {
            console.log("hide articles container");
            articlesContainer.classList.toggle("hidden", true);
        }

        function displayNotFound() {
            notFoundText.classList.toggle("hidden", false);
            searchBarBorder.classList.toggle("border-red-400", true);
        }

        function hideNotFound() {
            notFoundText.classList.toggle("hidden", true);
            searchBarBorder.classList.toggle("border-red-400", false);
        }

        async function loadPagefind() {
            const pf = "/pagefind/pagefind.js";
            return await import(/* @vite-ignore */ pf);
        }

        window.addEventListener("DOMContentLoaded", async () => {
            // @ts-ignore
            const pagefind = await loadPagefind();

            pagefind.init();

            // @ts-ignore
            const searchForm: HTMLFormElement = document.getElementById("search-form");
            // @ts-ignore
            const searchInput: HTMLInputElement = document.getElementById("search-input");

            let timeout: NodeJS.Timeout | undefined;

            searchInput.addEventListener("input", async () => {
                clearTimeout(timeout);
                timeout = setTimeout(() => handleSubmit(), 300);
            });

            searchForm.addEventListener("submit", (event) => {
                event.preventDefault();
                handleSubmit();
            });

            async function handleSubmit() {
                hideNotFound();
                clearResults();
                const input = searchInput.value;
                if (input.length == 0) {
                    hideNotFound();
                    showArticlesContainer();
                    return;
                }
                const search = await pagefind.search(input);
                const results = await Promise.all(search.results.map((result: any) => result.data()));
                console.log(results);
                if (results.length == 0) {
                    displayNotFound();
                    showArticlesContainer();
                    return;
                }
                hideNotFound();
                hideArticlesContainer();
                results.forEach((result) => {
                    addResult(
                        result.meta.title,
                        result.url,
                        result.meta.published_time,
                        result.meta.image,
                        result.excerpt,
                    );
                });
            }
        });
    </script>
</Page>
