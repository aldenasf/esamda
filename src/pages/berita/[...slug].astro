---
import { type CollectionEntry, getCollection } from "astro:content";
import Article from "../../layouts/Article.astro";
import { Markdown } from "@astropub/md";

// Function to prepend base URL to image paths
function prependBaseUrl(markdown: string, baseUrl: string): string {
    return markdown.replace(/!\[(.*?)\]\((.*?)\)/g, (match, altText, url) => {
        if (!url.startsWith("http") && !url.startsWith("/")) {
            url = `/${url}`;
        }

        if (!url.startsWith("http") && !url.startsWith(baseUrl)) {
            url = baseUrl + url;
        }
        return `![${altText}](${url})`;
    });
}

export async function getStaticPaths() {
    const articles = await getCollection("articles");

    articles.forEach((article) => {
        const baseUrl = import.meta.env.BASE_URL;
        article.body = article.body.replace(/!\[(.*?)\]\((.*?)\)/g, (match, altText, url) => {
            if (!url.startsWith("http") && !url.startsWith("/")) {
                url = `/${url}`;
            }
            if (!url.startsWith("http") && !url.startsWith(baseUrl)) {
                url = baseUrl + url;
            }
            return `![${altText}](${url})`;
        });
    });

    return articles.map((post: CollectionEntry<"articles">) => ({
        params: { slug: post.slug },
        props: post,
    }));
}

type Props = CollectionEntry<"articles">;

const article = Astro.props;
---

<Article {...article.data} body={article.body}>
    <Markdown of={article.body} />
</Article>
