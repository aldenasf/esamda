---
import { Icon } from "astro-icon/components";
---

<>
    <form role="search" id="search" aria-label="Cari berita" class="flex max-h-12 w-full">
        <div
            id="search-bar-border"
            class="inline-flex w-full items-center border-2 border-gray-300 px-4 py-1 group-focus:border-blue-800"
        >
            <Icon name="mdi:search" class="opacity-100" /><input
                class="group ml-4 block h-10 w-full opacity-100 focus:outline-none lg:max-w-3xl"
                type="text"
                placeholder="Cari"
                id="searchInput"
                autocapitalize="none"
            />
        </div>
    </form>

    <script>
        // @ts-ignore
        const articlesContainer: HTMLDivElement = document.getElementById("search-articles");
        // @ts-ignore
        const resultsContainer: HTMLDivElement = document.getElementById("search-results");
        // @ts-ignore
        const notFoundText: HTMLDivElement = document.getElementById("search-notfound");
        // @ts-ignore
        const searchBarBorder: HTMLDivElement = document.getElementById("search-bar-border");

        //  Creates a new card element on #search-results.
        //! Will need to be updated manually if `components/article/Card.astro` changes
        function addResult(title: string, href: string, date_str: string, cover_image: string, body: string) {
            const description = body.replace(/[\r\n\t\f\v ]+/g, " ").substring(0, 250) + "...";

            const a = document.createElement("a");
            a.classList.add("transition-color", "group", "flex", "rounded-lg", "duration-150", "hover:bg-blue-50");
            a.href = href;

            const div1 = document.createElement("div");
            div1.classList.add(
                "flex",
                "cursor-pointer",
                "flex-col",
                "content-center",
                "justify-between",
                "rounded-lg",
                "p-4",
                "lg:flex-row",
            );

            const div2 = document.createElement("div");
            div2.classList.add("flex", "min-h-fit", "min-w-fit", "items-center", "justify-center");

            const img = document.createElement("img");
            img.src = cover_image;
            img.alt = "";
            img.width = 360;
            img.height = 360;
            img.classList.add(
                "h-44",
                "max-w-sm",
                "rounded-sm",
                "object-cover",
                "transition-all",
                "duration-150",
                "lg:h-44",
                "lg:w-72",
            );

            div2.appendChild(img);

            const div3 = document.createElement("div");
            div3.classList.add(
                "mt-2",
                "flex",
                "max-w-xl",
                "flex-col",
                "flex-wrap",
                "items-start",
                "lg:ml-4",
                "lg:mt-0",
            );

            const h1 = document.createElement("h1");
            h1.id = "title";
            h1.classList.add(
                "text-justify",
                "text-2xl",
                "font-semibold",
                "transition-colors",
                "duration-150",
                "group-hover:text-blue-500",
                "lg:text-start",
            );
            h1.textContent = title;

            const p1 = document.createElement("p");
            const date = new Date(date_str);
            p1.id = "date";
            p1.classList.add("mt-1", "text-sm", "text-neutral-400", "transition-colors", "duration-150", "lg:mt-2");
            p1.innerHTML = `dibuat pada <time datetime="${date.toISOString()}">${date.toLocaleDateString("id-ID", {
                weekday: "long",
                year: "numeric",
                month: "long",
                day: "numeric",
            })}</time>`;

            const p2 = document.createElement("p");
            p2.id = "description";
            p2.classList.add("text-md", "mt-2", "text-justify", "lg:mt-auto");
            p2.innerHTML = description; // Use innerHTML to parse the HTML content

            div3.appendChild(h1);
            div3.appendChild(p1);
            div3.appendChild(p2);

            div1.appendChild(div2);
            div1.appendChild(div3);

            a.appendChild(div1);

            const hr = document.createElement("hr");
            hr.classList.add("mb-6", "min-w-full", "border-t-2", "border-t-gray-700", "opacity-20", "lg:mt-4");

            resultsContainer.appendChild(a);
            resultsContainer.appendChild(hr);
            console.log(`added ${href}`);
        }

        function clearResults() {
            console.log("cleared result");
            resultsContainer.innerHTML = "";
        }

        function showArticlesContainer() {
            console.log("show articles container");
            articlesContainer.classList.toggle("hidden", false);
        }

        function hideArticlesContainer() {
            console.log("hide articles container");
            articlesContainer.classList.toggle("hidden", true);
        }

        function displayNotFound() {
            notFoundText.classList.toggle("hidden", false);
            searchBarBorder.classList.toggle("border-red-400", true);
        }

        function hideNotFound() {
            notFoundText.classList.toggle("hidden", true);
            searchBarBorder.classList.toggle("border-red-400", false);
        }

        async function loadPagefind() {
            const pf = "/pagefind/pagefind.js";
            return await import(pf);
        }

        window.addEventListener("DOMContentLoaded", async () => {
            // @ts-ignore
            const pagefind = await loadPagefind();

            pagefind.init();

            // @ts-ignore
            const searchForm: HTMLFormElement = document.getElementById("search");
            // @ts-ignore
            const searchInput: HTMLInputElement = document.getElementById("searchInput");

            let timeout: NodeJS.Timeout | undefined;

            searchInput.addEventListener("input", async () => {
                clearTimeout(timeout);
                timeout = setTimeout(() => handleSubmit(), 300);
            });

            searchForm.addEventListener("submit", (event) => {
                event.preventDefault();
                handleSubmit();
            });

            async function handleSubmit() {
                hideNotFound();
                clearResults();
                const input = searchInput.value;
                if (input.length == 0) {
                    hideNotFound();
                    showArticlesContainer();
                    return;
                }
                const search = await pagefind.search(input);
                const results = await Promise.all(search.results.map((result: any) => result.data()));
                console.log(results);
                if (results.length == 0) {
                    displayNotFound();
                    showArticlesContainer();
                    return;
                }
                hideNotFound();
                hideArticlesContainer();
                results.forEach((result) => {
                    addResult(
                        result.meta.title,
                        result.url,
                        result.meta.published_time,
                        result.meta.image,
                        result.excerpt,
                    );
                });
            }
        });
    </script>
</>
